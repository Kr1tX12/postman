/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type Playlist = {
  _id: string;
  _type: "playlist";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  slug?: Slug;
  title?: string;
  select?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "startup";
  }>;
};

export type Startup = {
  _id: string;
  _type: "startup";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  slug?: Slug;
  title?: string;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  views?: number;
  description?: string;
  category?: string;
  image?: string;
  pitch?: string;
};

export type Author = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  id?: number;
  name?: string;
  username?: string;
  slug?: Slug;
  age?: number;
  email?: string;
  image?: string;
  bio?: string;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type Markdown = string;

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | SanityAssetSourceData | Playlist | Startup | Author | Slug | Markdown;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/queries.ts
// Variable: STARTUPS_QUERY
// Query: *[_type == 'startup' && defined(slug.current) && !defined($search) || category match $search || author->name match $search || title match  $search] | order(_createdAt desc) {        author -> {            _id, name, image, slug        },        views,        slug,        image,        description,        title,        pitch,        category,        _createdAt,    }
export type STARTUPS_QUERYResult = Array<{
  author: null;
  views: null;
  slug: Slug | null;
  image: null;
  description: null;
  title: string | null;
  pitch: null;
  category: null;
  _createdAt: string;
} | {
  author: null;
  views: null;
  slug: Slug | null;
  image: string | null;
  description: null;
  title: null;
  pitch: null;
  category: null;
  _createdAt: string;
} | {
  author: null;
  views: null;
  slug: null;
  image: null;
  description: string | null;
  title: string | null;
  pitch: null;
  category: null;
  _createdAt: string;
} | {
  author: {
    _id: string;
    name: string | null;
    image: string | null;
    slug: Slug | null;
  } | null;
  views: number | null;
  slug: Slug | null;
  image: string | null;
  description: string | null;
  title: string | null;
  pitch: string | null;
  category: string | null;
  _createdAt: string;
}>;
// Variable: STARTUP_QUERY_BY_SLUG
// Query: *[_type == 'startup' && slug.current == $slug][0] {        author -> {            _id, name, username, image, bio, slug        },        _id,        views,        slug,        image,        description,        title,        pitch,        category,        pitch,        _createdAt,    }
export type STARTUP_QUERY_BY_SLUGResult = {
  author: {
    _id: string;
    name: string | null;
    username: string | null;
    image: string | null;
    bio: string | null;
    slug: Slug | null;
  } | null;
  _id: string;
  views: number | null;
  slug: Slug | null;
  image: string | null;
  description: string | null;
  title: string | null;
  pitch: string | null;
  category: string | null;
  _createdAt: string;
} | null;
// Variable: STARTUP_VIEWS_QUERY
// Query: *[_type == 'startup' && _id == $id][0] {        views, _id    }
export type STARTUP_VIEWS_QUERYResult = {
  views: number | null;
  _id: string;
} | null;
// Variable: AUTHOR_BY_GITHUB_ID_QUERY
// Query: *[_type == 'author' && id == $id][0] {        _id,        id,        name,        username,        slug,        age,        image,         bio,        email   }
export type AUTHOR_BY_GITHUB_ID_QUERYResult = {
  _id: string;
  id: number | null;
  name: string | null;
  username: string | null;
  slug: Slug | null;
  age: number | null;
  image: string | null;
  bio: string | null;
  email: string | null;
} | null;
// Variable: AUTHOR_BY_ID_QUERY
// Query: *[_type == 'author' && _id == $id][0] {         _id,         id,         name,         username,         slug,         age,         image,          bio,         email    }
export type AUTHOR_BY_ID_QUERYResult = {
  _id: string;
  id: number | null;
  name: string | null;
  username: string | null;
  slug: Slug | null;
  age: number | null;
  image: string | null;
  bio: string | null;
  email: string | null;
} | null;
// Variable: AUTHOR_BY_SLUG_QUERY
// Query: *[_type == 'author' && slug.current == $slug][0] {         _id,         id,         name,         username,         slug,         age,         image,          bio,         email    }
export type AUTHOR_BY_SLUG_QUERYResult = {
  _id: string;
  id: number | null;
  name: string | null;
  username: string | null;
  slug: Slug | null;
  age: number | null;
  image: string | null;
  bio: string | null;
  email: string | null;
} | null;
// Variable: STARTUPS_BY_USER_ID_QUERY
// Query: *[_type == 'startup' && author->id == $userID] | order(_createdAt desc) {        author -> {            _id, name, image, slug        },        views,        slug,        image,        description,        title,        pitch,        category,        _createdAt,    }
export type STARTUPS_BY_USER_ID_QUERYResult = Array<{
  author: {
    _id: string;
    name: string | null;
    image: string | null;
    slug: Slug | null;
  } | null;
  views: number | null;
  slug: Slug | null;
  image: string | null;
  description: string | null;
  title: string | null;
  pitch: string | null;
  category: string | null;
  _createdAt: string;
}>;
// Variable: PLAYLIST_BY_SLUG_QUERY
// Query: *[_type == 'playlist' && slug.current == $slug][0] {        _id,        title,        slug,        select[] -> {            author -> {                _id, name, image, slug            },            views,            slug,            image,            description,            title,            pitch,            category,            _createdAt,            _id        }    }
export type PLAYLIST_BY_SLUG_QUERYResult = {
  _id: string;
  title: string | null;
  slug: Slug | null;
  select: Array<{
    author: {
      _id: string;
      name: string | null;
      image: string | null;
      slug: Slug | null;
    } | null;
    views: number | null;
    slug: Slug | null;
    image: string | null;
    description: string | null;
    title: string | null;
    pitch: string | null;
    category: string | null;
    _createdAt: string;
    _id: string;
  }> | null;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n    *[_type == 'startup' && defined(slug.current) && !defined($search) || category match $search || author->name match $search || title match  $search] | order(_createdAt desc) {\n        author -> {\n            _id, name, image, slug\n        },\n        views,\n        slug,\n        image,\n        description,\n        title,\n        pitch,\n        category,\n        _createdAt,\n    }": STARTUPS_QUERYResult;
    "\n    *[_type == 'startup' && slug.current == $slug][0] {\n        author -> {\n            _id, name, username, image, bio, slug\n        },\n        _id,\n        views,\n        slug,\n        image,\n        description,\n        title,\n        pitch,\n        category,\n        pitch,\n        _createdAt,\n    }\n": STARTUP_QUERY_BY_SLUGResult;
    "\n    *[_type == 'startup' && _id == $id][0] {\n        views, _id\n    }     \n": STARTUP_VIEWS_QUERYResult;
    "\n   *[_type == 'author' && id == $id][0] {\n        _id,\n        id,\n        name,\n        username,\n        slug,\n        age,\n        image, \n        bio,\n        email\n   } \n": AUTHOR_BY_GITHUB_ID_QUERYResult;
    "\n    *[_type == 'author' && _id == $id][0] {\n         _id,\n         id,\n         name,\n         username,\n         slug,\n         age,\n         image, \n         bio,\n         email\n    } \n ": AUTHOR_BY_ID_QUERYResult;
    "\n    *[_type == 'author' && slug.current == $slug][0] {\n         _id,\n         id,\n         name,\n         username,\n         slug,\n         age,\n         image, \n         bio,\n         email\n    } \n ": AUTHOR_BY_SLUG_QUERYResult;
    "\n    *[_type == 'startup' && author->id == $userID] | order(_createdAt desc) {\n        author -> {\n            _id, name, image, slug\n        },\n        views,\n        slug,\n        image,\n        description,\n        title,\n        pitch,\n        category,\n        _createdAt,\n    }\n": STARTUPS_BY_USER_ID_QUERYResult;
    "\n    *[_type == 'playlist' && slug.current == $slug][0] {\n        _id,\n        title,\n        slug,\n        select[] -> {\n            author -> {\n                _id, name, image, slug\n            },\n            views,\n            slug,\n            image,\n            description,\n            title,\n            pitch,\n            category,\n            _createdAt,\n            _id\n        }\n    }": PLAYLIST_BY_SLUG_QUERYResult;
  }
}
